<!doctype html>
<html>
<head>

	<style>
		h1 {text-align: center; font-family:garamond;}
		p {text-align: justify; font-family:garamond; align-items: center;}
		form {text-align: center; font-family:garamond;}
		textarea {text-align: center;}
		button {text-align: center; font-family:garamond;}
	</style>

  <h1> {{res}}</h1>

  <style>
  * {
    box-sizing: border-box;
  }

  body {
    font: 16px Arial;  
  }

  /*the container must be positioned relative:*/
  .autocomplete {
    position: relative;
    display: inline-block;
  }

  input {
    border: 1px solid transparent;
    background-color: #f1f1f1;
    padding: 10px;
    font-size: 16px;
  }

  input[type=text] {
    background-color: #f1f1f1;
    width: 100%;
  }

  input[type=submit] {
    background-color: DodgerBlue;
    color: #fff;
    cursor: pointer;
  }

  .autocomplete-items {
    position: absolute;
    border: 1px solid #d4d4d4;
    border-bottom: none;
    border-top: none;
    z-index: 99;
    /*position the autocomplete items to be the same width as the container:*/
    top: 100%;
    left: 0;
    right: 0;
  }

  .autocomplete-items div {
    padding: 10px;
    cursor: pointer;
    background-color: #fff; 
    border-bottom: 1px solid #d4d4d4; 
  }

  /*when hovering an item:*/
  .autocomplete-items div:hover {
    background-color: #e9e9e9; 
  }

  /*when navigating through the items using the arrow keys:*/
  .autocomplete-active {
    background-color: DodgerBlue !important; 
    color: #ffffff; 
  }
  </style>

	<title>Result</title>

    <style type="text/css">
        html, body {
            font: 16pt arial;
        }

        #viz {
            width: 900px;
            height: 700px;
            border: 1px solid lightgray;
            font: 22pt arial;
        }

    </style>

    <!-- LOAD ONLINE -->
	<script src="https://rawgit.com/neo4j-contrib/neovis.js/master/dist/neovis.js"></script>

    <script
            src="https://code.jquery.com/jquery-3.2.1.min.js"
            integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
            crossorigin="anonymous"></script>

    <script type="text/javascript">
		var viz;

		function draw() {
      var res_name = "{{res}}"
      var cypher = "MATCH p=(n1:ns0__Topic)-[r:HAS_TOPIC]->(n2:AI_RESOURCE {rdfs__label: '"+ res_name + "'}) RETURN p"
      //console.log(cypher)
			var config = {
				container_id: "viz",
				server_url: "bolt://localhost:7687",
				server_user: "neo4j",
				server_password: "1234",
				arrows: true,
                labels: {
					"Resource": {
						"caption": "rdfs__label",
						//"size": "pagerank",
						//"community": "community"
						//"sizeCypher": "MATCH (n) WHERE id(n) = {id} MATCH (n)-[r]-() RETURN sum(r.weight) AS c"
					},
					"ns0__Topic": {
						"caption": "rdfs__label",
						//"size": "pagerank",
						//"community": "community"
						//"sizeCypher": "MATCH (n) WHERE id(n) = {id} MATCH (n)-[r]-() RETURN sum(r.weight) AS c"
					}
				},
				relationships: {
					"ns0__superTopicOf": {
						//"thickness": "weight",
						//"caption": false
					}
					
				},
				//initial_cypher: "MATCH (t:ns0__Topic) WHERE t.rdfs__label = 'artificial intelligence' RETURN t"
				//initial_cypher: "MATCH (n:ns0__Topic) RETURN n LIMIT 25"
        
				initial_cypher: cypher
			};

			viz = new NeoVis.default(config);
			viz.render();
			//console.log(viz);

		}
    </script>

</head>

<body onload="draw()">

<style>
.center {
  margin: auto;
  width: 60%;
  border: 3px solid #73AD21;
  padding: 10px;
}
</style>

<script type = "text/javascript">

  var lines = "{{out}}"
  var out = lines.split(',')
  
  var sub_topic = ""
  var res_id;
  var topics = [];
  var buss_categories = [];
  var tech_categories = [];
  var buss_categories_sug = [];
  var tech_categories_sug = [];
  var all_topics = [];
  var suggest = {};
  
  let i = 0;

  while (i<out.length && out[i]!="---------") {
    topics.push(out[i]);
    ++i;
  }
  ++i;

  while (i<out.length && out[i]!="---------") {
    buss_categories.push(out[i]);
    ++i;
  }
  ++i;

  while (i<out.length && out[i]!="---------") {
    tech_categories.push(out[i]);
    ++i;
  }
  ++i;

  while (i<out.length && out[i]!="---------") {
    buss_categories_sug.push(out[i]);
    ++i;
  }
  ++i;

  while (i<out.length && out[i]!="---------") {
    tech_categories_sug.push(out[i]);
    ++i;
  }
  ++i;

  while (i<out.length && out[i]!="---------") {
    let key = out[i]
    suggest[key] = []
    ++i;
    while (i<out.length && out[i]!="---------") {
      suggest[key].push(out[i]);
      ++i;
    }
    ++i;
  }
  ++i;

  while (i<out.length && out[i]!="---------") {
    all_topics.push(out[i]);
    ++i;
  }
  ++i;

  while (i<out.length && out[i]!="---------") {
    res_id = out[i]
    ++i;
  }
  
  for (var key in suggest) {
    suggest[key] = suggest[key].filter( function( el ) {
      return topics.indexOf( el ) < 0;
    } );
  }

  console.log("SUGGESTIONS")
  console.log(suggest)

</script>

<h1> <b>Resource description: </b> </h1> 

<p id="p1"> {{text}}</p>

<script type="text/javascript">
    for (let i = 0; i<topics.length; i++) {
      var word = topics[i]
      var str = document.getElementById("p1").innerHTML; 
      var res = str.replace(word, "<span style='color:red'>"+word+"</span>");
      document.getElementById("p1").innerHTML = res;
    }
</script>

<script>
	$("#reload").click(function() {

		var cypher = $("#cypher").val();

		if (cypher.length > 3) {
			viz.renderWithCypher(cypher);
		} else {
			console.log("reload");
			viz.reload();

		}

	});

	$("#stabilize").click(function() {
		viz.stabilize();
	})

</script>

<br>

<form>
<label for="cars">Bussiness Category:</label>
<select id="buss_form"></select>
<button type="submit" style="margin:auto"> Add new</button>
</form>
<script>
 var optionList = "";
 for (let i = 0; i<buss_categories.length; i++) {
   if (buss_categories_sug.includes(buss_categories[i])) {
      optionList += "<option>"+buss_categories[i] + " (suggested)"+"</option>";

   }
   else {
      optionList += "<option>"+buss_categories[i] +"</option>";
   }
 }
 $("select#buss_form").html(optionList);
 
</script>

<form>
<label for="cars">Technical Category:</label>
<select id="tech_form"></select>
<button type="submit" style="margin:auto"> Add new</button>
</form>
<script>
 var optionList = "";
 for (let i = 0; i<tech_categories.length; i++) {
   if (tech_categories_sug.includes(tech_categories[i])) {
      optionList += "<option>"+tech_categories[i] + " (suggested)"+"</option>";

   }
   else {
      optionList += "<option>"+tech_categories[i] +"</option>";
   }
 }
 $("select#tech_form").html(optionList);
</script>

    <style>
    .text-center {
  text-align: center;
}
</style>
<br>
<div class="text-center">
<button type="submit" style="margin:auto" value="AI for Machine" name="action"> Apply</button>
</div>


<div id="container"></div>

{{!-- <script>


  var values = ["dog", "cat", "parrot", "rabbit"];

  var select = document.createElement("select");
  select.name = "pets";
  select.id = "pets"

  for (const val of values) {
    var option = document.createElement("option");
    option.value = val;
    option.text = val.charAt(0).toUpperCase() + val.slice(1);
    select.appendChild(option);
  }

  var label = document.createElement("label");
  label.innerHTML = "Choose your pets: "
  label.htmlFor = "pets";

  document.getElementById("container").appendChild(label).appendChild(select);
</script> --}}

<script>
  let nbut = 0;
</script>

<script>
function hide_suggestions() {

  let ides = 'id';
  let idbr = 'br';

  for (let i = 0; i<nbut; i++) {
    let ideact = ides.concat(i.toString());
    var elem = document.getElementById(ideact);
    if (elem != null) elem.remove();

    let bract = idbr.concat(i.toString());
    elem = document.getElementById(bract);
    if (elem != null) elem.remove();
  }
  var x = document.getElementById("superTopic");
  x.style.display = "none";

  elem = document.getElementById("idtop");
  if (elem != null) elem.remove();

  elem = document.getElementById("idinput");
  if (elem != null) elem.remove();

}
</script>

<h1> <b>Click a word to show suggestions below and/or visualize a graph explanation:</b> 
<div class="text-center">

<button type="submit" onclick="hide_suggestions()"> Hide suggestions</button> </h1>
</div>

<div id="suggestions"></div>

<form id="superTopic" autocomplete="off">
  <div class="autocomplete" style="width:300px;">
    <input id="myInput" type="text" name="superTopic" placeholder="Super Topic">
  </div>
  <input type="submit" value="Insert" name="Apply">
</form>

<br>
<div id="viz" class="center" style="align-content: center"></div>
{{!-- <button type="submit" style="margin:auto"> Reset</button> --}}
<h1><b>Cypher manual query:</b></h1> 

<form>
<textarea rows="4" cols=50 id="cypher"> </textarea><br>
<input style="font-family:garamond" type="submit" value="Submit" id="reload">
<input style="font-family:garamond" type="submit" value="Stabilize" id="stabilize">

</form>

<script>
	function redraw(cypher) {
		if (cypher.length > 3) {
			viz.renderWithCypher(cypher);
		} else {
			console.log("reload");
			viz.reload();
		}
	}
</script>

<style>
.button {
  background-color: #4CAF50;
  border: none;
  color: white;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  margin: 4px 2px;
  cursor: pointer;
}
</style>

<script type = "text/javascript">
    $(document).ready(function() {

    var p = $('p');
    p.css({ cursor: 'pointer' });

    function getSelectedText() {
        if (window.getSelection) {
            return window.getSelection().toString();
        } else if (document.selection) {
            return document.selection.createRange().text;
        }
        return '';
    }
    function showSuggestions (mode) {
        var range = window.getSelection() || document.getSelection() || document.selection.createRange();
        var word = $.trim(range.toString());
		    var cypher = "MATCH p=()-[r:ns0__superTopicOf]->() RETURN p LIMIT 2";
        
        if (mode == "1") {
          word = getSelectedText();
          alert(word);
        }
        if (mode == "2") alert(word);

        if(word != '#p1') {
			    redraw(cypher);

          let ides = 'id';
          let idbr = 'br';

          for (let i = 0; i<nbut; i++) {
            let ideact = ides.concat(i.toString());
            var elem = document.getElementById(ideact);
            if (elem != null) elem.remove();

            let bract = idbr.concat(i.toString());
            elem = document.getElementById(bract);
            if (elem != null) elem.remove();

            elem = document.getElementById("idtop");
            if (elem != null) elem.remove();

            elem = document.getElementById("idinput");
            if (elem != null) elem.remove();
          }

          word_sug = suggest[word];
          //console.log(word_sug)

          if (word_sug == undefined) nbut = 0;
          else nbut = word_sug.length;

          for (let i = 0; i<nbut; i++) {
            let btn = document.createElement("button");
            btn.id = ides.concat(i.toString());
            btn.style.margin = "auto";
            btn.style.alignItems = "center";
            btn.style.display = "flex";
            btn.style.fontSize = "16px";
            btn.innerHTML = word_sug[i];
            btn.onclick = function () {
              result = confirm(btn.innerHTML);
              if (result) {
                topic_selected = document.getElementById("idtop");
                if (topic_selected != null) {
                  topic_selected.innerHTML = btn.innerHTML;
                  sub_topic = btn.innerHTML;
                  alert(input.innerText)
                }
              }
            };
            document.getElementById("suggestions").appendChild(btn);
            
            linebreak = document.createElement("br");
            linebreak.id = idbr.concat(i.toString());

            document.getElementById("suggestions").appendChild(linebreak);
            
          }
          var x = document.getElementById("superTopic");
          x.style.display = "block";
          
          topic_selected = document.createElement("p");
          topic_selected.id="idtop";
          topic_selected.style.margin = "auto";
          topic_selected.style.alignItems = "center";
          topic_selected.style.display = "flex";
          topic_selected.style.fontSize = "16px";
          topic_selected.innerHTML= "Choose a suggested topic or insert a new one:";

          document.getElementById("suggestions").appendChild(topic_selected)

          var input = document.createElement("input");
          input.id = "idinput"
          input.placeholder = "Topic"
          input.style.float = "center"

          document.getElementById("suggestions").appendChild(input)

          $.post( "/modify", { word: word} );

        }
        //range.collapse();
       //e.stopPropagation();
    }
    
    p.mouseup(function () {
        showSuggestions("1");
    });
    /*
    p.click(function () {
        showSuggestions("2");
    });
    */
});
    
</script>


</body>

<script type = "text/javascript">

function autocomplete(inp, arr) {
  /*the autocomplete function takes two arguments,
  the text field element and an array of possible autocompleted values:*/
  var currentFocus;
  /*execute a function when someone writes in the text field:*/
  inp.addEventListener("input", function(e) {
      var a, b, i, val = this.value;
      /*close any already open lists of autocompleted values*/
      closeAllLists();
      if (!val) { return false;}
      currentFocus = -1;
      /*create a DIV element that will contain the items (values):*/
      a = document.createElement("DIV");
      a.setAttribute("id", this.id + "autocomplete-list");
      a.setAttribute("class", "autocomplete-items");
      /*append the DIV element as a child of the autocomplete container:*/
      this.parentNode.appendChild(a);
      /*for each item in the array...*/
      for (i = 0; i < arr.length; i++) {
        /*check if the item starts with the same letters as the text field value:*/
        if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
          /*create a DIV element for each matching element:*/
          b = document.createElement("DIV");
          /*make the matching letters bold:*/
          b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
          b.innerHTML += arr[i].substr(val.length);
          /*insert a input field that will hold the current array item's value:*/
          b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
          /*execute a function when someone clicks on the item value (DIV element):*/
              b.addEventListener("click", function(e) {
              /*insert the value for the autocomplete text field:*/
              inp.value = this.getElementsByTagName("input")[0].value;
              /*close the list of autocompleted values,
              (or any other open lists of autocompleted values:*/
              closeAllLists();
          });
          a.appendChild(b);
        }
      }
  });
  /*execute a function presses a key on the keyboard:*/
  inp.addEventListener("keydown", function(e) {
      var x = document.getElementById(this.id + "autocomplete-list");
      if (x) x = x.getElementsByTagName("div");
      if (e.keyCode == 40) {
        /*If the arrow DOWN key is pressed,
        increase the currentFocus variable:*/
        currentFocus++;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 38) { //up
        /*If the arrow UP key is pressed,
        decrease the currentFocus variable:*/
        currentFocus--;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 13) {
        /*If the ENTER key is pressed, prevent the form from being submitted,*/
        e.preventDefault();
        if (currentFocus > -1) {
          /*and simulate a click on the "active" item:*/
          if (x) x[currentFocus].click();
        }
      }
  });
  function addActive(x) {
    /*a function to classify an item as "active":*/
    if (!x) return false;
    /*start by removing the "active" class on all items:*/
    removeActive(x);
    if (currentFocus >= x.length) currentFocus = 0;
    if (currentFocus < 0) currentFocus = (x.length - 1);
    /*add class "autocomplete-active":*/
    x[currentFocus].classList.add("autocomplete-active");
  }
  function removeActive(x) {
    /*a function to remove the "active" class from all autocomplete items:*/
    for (var i = 0; i < x.length; i++) {
      x[i].classList.remove("autocomplete-active");
    }
  }
  function closeAllLists(elmnt) {
    /*close all autocomplete lists in the document,
    except the one passed as an argument:*/
    var x = document.getElementsByClassName("autocomplete-items");
    for (var i = 0; i < x.length; i++) {
      if (elmnt != x[i] && elmnt != inp) {
      x[i].parentNode.removeChild(x[i]);
    }
  }
}
/*execute a function when someone clicks in the document:*/
document.addEventListener("click", function (e) {
    closeAllLists(e.target);
});
}

var countries = all_topics;
autocomplete(document.getElementById("myInput"), countries);
    
var x = document.getElementById("superTopic");
x.style.display = "none";


</script>

</html>