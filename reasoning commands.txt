                            FIRST SEMANTIC

// INVERSE
MATCH (t1: ns0__Topic)-[rel:ns0__superTopicOf]->(t2: ns0__Topic) 
CALL apoc.refactor.invert(rel)
yield input, output
RETURN input, output

/* RELATIONSHIPS CHECK
MATCH path = (c:ns0__Topic {rdfs__label: "internet"})<-[:ns0__superTopicOf*]-(child)
RETURN path
*/

// CATEGORY INFERENCE
MATCH (c:ns0__Topic {rdfs__label: "internet"})
CALL n10s.inference.nodesInCategory(c, {
  inCatRel: "ns0__preferentialEquivalent",
  subCatRel: "ns0__superTopicOf"
})
YIELD node
WITH node.rdfs__label as nodes1
RETURN nodes1

// INVERSE
MATCH (t1: ns0__Topic)-[rel:ns0__superTopicOf]->(t2: ns0__Topic) 
CALL apoc.refactor.invert(rel)
yield input, output
RETURN input, output

                            SECOND SEMANTIC

// CATEGORY INFERENCE (NOT DIRECTLY LINKED) "online" topics
match path = (c:ns0__Topic)-[:ns0__relatedEquivalent]->(category)-[:ns0__superTopicOf*]->(:ns0__Topic {rdfs__label: "internet"})
where c.rdfs__label contains "streaming"
RETURN path;

                            CREATE PARTIAL GRAPH

CALL gds.graph.create.cypher(
    'my-cypher-graph',
    'match path = (c:ns0__Topic)-[:ns0__relatedEquivalent]->(category)-[:ns0__superTopicOf*]->(:ns0__Topic {rdfs__label: "internet"}) where c.rdfs__label contains "streaming" RETURN path;',
)
YIELD graphName, nodeCount, relationshipCount, createMillis;



                            FIRST SIMILARITY (SIMPLE)
MATCH (c:AI_RESOURCE {rdfs__label: "MACHINE LOGISTICS SYSTEM"}),
      path = (c)<-[:HAS_TOPIC]-(topic),
      otherPath = (topic)-[:HAS_TOPIC]->(res)
MATCH (res)<-[:HAS_TOPIC]-(newtopic)
WHERE newtopic <> topic
RETURN newtopic.rdfs__label AS name


                            SECOND SIMILARITY

INTRA CAT:

MATCH (c:ns0__Topic {rdfs__label: "mobile operators"}),
      path = (c)-[:HAS_TOPIC]->(res)-[:HAS_CATEGORY]->(cat),
      otherPath = (other)-[:HAS_CATEGORY]->(cat)
return path, otherPath

OUTTA CAT:

MATCH (c:ns0__Topic {rdfs__label: "mobile operators"}),
      entityPath = (c)-[:HAS_TOPIC]->(res)-[:HAS_CATEGORY]->(cat),
      path = (cat)-[:skos__topConceptOf]->(parent)<-[:skos__topConceptOf]-(otherCat),
      otherEntityPath = (otherCat)<-[:HAS_CATEGORY]-(otherWiki)<-[:HAS_TOPIC]-(other)
RETURN other.rdfs__label,
       [(other)-[:HAS_TOPIC]->()-[:HAS_CATEGORY]->(entity) | entity.rdfs__label] AS otherCategories,
       collect([node in nodes(path) | node.rdfs__label]) AS pathToOther


                            ONTOLOGY UPLOAD

CALL n10s.rdf.import.fetch("file:///Users/arnau/Desktop/classifier/topics.ttl","Turtle");
CALL n10s.rdf.import.fetch("file:///Users/arnau/Desktop/classifier/cso.ttl","Turtle");